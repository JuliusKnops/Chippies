import random
import numpy as np 

""""Genetic algorithm"""
#from move_random.py import solution 

parent1 = [[(1, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (1, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 3, 2), (0, 4, 2), (0, 5, 2), (0, 6, 2), (1, 6, 2), (1, 6, 3), (2, 6, 3), (2, 6, 2), (2, 7, 2), (3, 7, 2), (3, 7, 1), (4, 7, 1), (5, 7, 1), (5, 7, 0), (6, 7, 0), (6, 6, 0), (6, 6, 0), (6, 5, 0)], [(1, 5, 0), (1, 6, 0), (1, 7, 0), (2, 7, 0), (3, 7, 0), (4, 7, 0), (4, 6, 0), (4, 5, 0), (4, 5, 0), (4, 4, 0)], [(4, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0)], [(6, 2, 0), (5, 2, 0), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 4, 0), (5, 3, 0), (6, 3, 0), (7, 3, 0), (7, 4, 0), (6, 4, 0), (6, 4, 0), (6, 5, 0)], [(6, 2, 0), (6, 1, 0), (6, 0, 0), (7, 0, 0), (7, 0, 1), (6, 0, 1), (6, 1, 1), (6, 1, 2), (7, 1, 2), (7, 1, 3), (7, 1, 4), (7, 0, 4), (6, 0, 4), (6, 0, 3), (7, 0, 3), (7, 0, 2), (6, 0, 2), (5, 0, 2), (5, 1, 2), (5, 1, 3), (5, 0, 3), (4, 0, 3), (3, 0, 3), (2, 0, 3), (2, 1, 3), (3, 1, 3), (3, 2, 3), (2, 2, 3), (2, 2, 2), (2, 1, 2), (2, 0, 2), (3, 0, 2), (3, 0, 1), (3, 0, 0), (3, 0, 0), (3, 1, 0)]]

parent2 = [[(1, 5, 0), (0, 5, 0), (0, 6, 0), (0, 7, 0), (0, 7, 1), (0, 6, 1), (0, 6, 2), (1, 6, 2), (1, 5, 2), (1, 5, 1), (0, 5, 1), (0, 5, 2), (0, 4, 2), (0, 3, 2), (1, 3, 2), (1, 3, 3), (1, 4, 3), (0, 4, 3), (0, 4, 4), (0, 5, 4), (1, 5, 4), (1, 4, 4), (2, 4, 4), (2, 4, 3), (2, 4, 2), (2, 3, 2), (2, 2, 2), (1, 2, 2), (0, 2, 2), (0, 2, 1), (1, 2, 1), (2, 2, 1), (3, 2, 1), (3, 1, 1), (2, 1, 1), (1, 1, 1), (1, 1, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (3, 4, 0), (4, 4, 0)], [(1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 3, 1), (1, 4, 1), (2, 4, 1), (2, 5, 1), (2, 6, 1), (2, 7, 1), (2, 7, 0), (2, 6, 0), (2, 5, 0), (3, 5, 0), (4, 5, 0), (5, 5, 0), (6, 5, 0)], [(4, 4, 0), (4, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0)], [(6, 2, 0), (6, 1, 0), (7, 1, 0), (7, 2, 0), (7, 3, 0), (6, 3, 0), (5, 3, 0), (5, 4, 0), (6, 4, 0), (6, 5, 0)], [(6, 2, 0), (5, 2, 0), (4, 2, 0), (3, 2, 0), (3, 1, 0)]]


def is_valid(child):
    # 
    valid = True
    is_valid_list = []
    for i in child:
       for j in range(len(i) - 1):
        is_valid_list.append((i[j], i[j + 1]))
    if len(is_valid_list) > len(set(is_valid_list)):
        valid = False
    else: valid = True
    return valid

def cost(units, crossings):
    return units + 300 * crossings

def fitness(units, crossings):
    ans = cost(units, crossings)
if ans == 0: 
    



if __name__ == "__main__":

